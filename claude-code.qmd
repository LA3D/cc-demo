---
title: "Making a demo with Claude Code"
subtitle: "Dialogue Engineering with AI"
author: "Charles F. Vardeman II"
date: today
format: revealjs
---

# Introduction

This presentation was created collaboratively by human and AI using Claude Code itself - a live demonstration of dialogue engineering in action.

## The Meta-Presentation

- These slides: Created with Claude Code
- The tools: Quarto + Reveal.js
- The method: Human + AI collaboration
- The proof: You're looking at it

## What is Claude Code?

- **Agentic system** with reasoning capabilities
- Thinks, reflects, uses tools strategically
- **Interactive mode**: Human-AI collaboration
- **Autonomous mode**: Independent task completion

üìö [Claude Code Documentation](https://docs.anthropic.com/en/docs/claude-code)


# Core Concepts & Philosophy

## The Unix Philosophy

- Small, focused tools
- Composability over monoliths
- Text as universal interface
- Do one thing well

## What is Dialogue Engineering?

- Jeremy Howard's Answer.AI methodology
- Small steps beat big code dumps
- "Powerful feedback loop" - each step makes both smarter
- Write a line, AI suggests next, iterate

üìö [Answer.AI Dialogue Engineering](https://www.answer.ai/posts/2024-11-07-solveit.html)

## The Solveit Methodology

- Jeremy Howard's "How to Solve It with Code"
- Break problems into "small, solvable pieces"
- Start solving concrete problems day one
- Not about being genius - about right process

üìö [Solveit Course](https://solveit.fast.ai/) | [Answer.AI](https://www.answer.ai/)

# Working with Claude Code

## Our Dialogue Engineering Process

### Step 1: Voice-Driven Strategic Planning
"Think through this presentation with you as co-pilot"
- Started with high-level goals
- No code yet - just thinking
- Voice input via Mac Whisper

## Step 2: Context Gathering

```bash
# First action: Fetch best practices
WebFetch(https://www.anthropic.com/engineering/claude-code-best-practices)
# Result: 273.2KB of guidance
```

## Step 3: Todo-Driven Structure

```
‚òê Define presentation structure and flow
‚òê Outline Unix philosophy section
‚òê Plan dialogue engineering section
‚òê Design workflow demonstrations
```

## Step 4: Iterative Refinement

**You**: "This is superficial"
**Action**: WebSearch + WebFetch for Jeremy Howard's methodology
**Result**: Deeper understanding ‚Üí Better content

## The Feedback Loop in Action

```mermaid
graph LR
    A[Voice Input] --> B[Claude Thinks]
    B --> C[Tool Use]
    C --> D[Human Review]
    D --> E[Refinement]
    E --> A
```

Each cycle deepens understanding

# Live Demo: Creating These Slides

## The Meta-Demonstration

These slides are the proof:
- Created through our dialogue
- Using the methodology we're teaching
- Voice ‚Üí Planning ‚Üí Research ‚Üí Implementation
- You're experiencing the result

## How We Actually Started

1. **You opened dialogs/thinking.txt** - Recording our process
2. **Selected Opus model** - For strategic thinking
3. **Voice dictation began** - Natural language planning
4. **No code written yet** - Just collaborative thinking

## Key Moments in Our Dialogue

### The Opening
> "I want to think through this presentation with you as co-pilot"

### The Critique
> "This is superficial"

### The Insight
> "The real-world application is... me walking through how I created this presentation with you"

## Voice Workflow: Our Actual Process

1. **Mac Whisper** ‚Üí Natural language
2. **Complex thoughts** ‚Üí Simple commands
3. **"Think through..."** ‚Üí Strategic planning
4. **"Let's revise..."** ‚Üí Iterative improvement
5. **Real-time collaboration** ‚Üí Better results

# Key Takeaways

## Dialogue Engineering > Code Generation

- Small steps win
- Voice + AI = Productivity
- Tools compose beautifully
- Process beats genius

## Questions?

Let's solve a problem together!

---

# Reference Materials

*The following slides provide detailed resources, installation guides, and additional materials for your reference.*

# Getting Started

## Getting Started with Claude Code

**Official Homepage**: [https://www.anthropic.com/claude-code](https://www.anthropic.com/claude-code)

**Installation**:

*First, install Node.js 18+ (macOS with Homebrew):*
```bash
brew install node
```

*Then install Claude Code:*
```bash
npm install -g @anthropic-ai/claude-code
```

**Requirements**:
- macOS, Linux, or Windows (via WSL)
- Claude Pro ($17/month) or Max (starting $100/month)
- Terminal access

## The Terminal Advantage

- Lives in your terminal, not your editor
- Works with VS Code, JetBrains, vim, emacs...
- Editor-agnostic by design
- Your workflow, your tools

## Voice-Driven Development

- Mac Whisper integration
- Natural language to code
- Thinking out loud
- Rapid iteration

üìé [Mac Whisper](https://goodsnooze.gumroad.com/l/macwhisper) | [SuperWhisper](https://superwhisper.com/)

## Repository Structure as Memory

```bash
project/
‚îú‚îÄ‚îÄ CLAUDE.md          # Project instructions
‚îú‚îÄ‚îÄ llmstxt/          # Reference materials
‚îú‚îÄ‚îÄ dialogs/          # Saved conversations
‚îî‚îÄ‚îÄ src/              # Your code
```

# Tools & Capabilities

## Claude Code's Tool Ecosystem

- **Read/Write**: File operations
- **Edit/MultiEdit**: Precise modifications
- **Grep/Glob**: Pattern search
- **Bash**: System commands
- **WebSearch/WebFetch**: Live information

## Agentic Search vs Vector Indexing

- No pre-built index needed
- Dynamic exploration
- Context-aware navigation
- Tools compose into workflows

## Web Capabilities

- **WebSearch**: Current information
- **WebFetch**: Extract documentation
- Stay beyond training cutoff
- Real-time knowledge gathering

## Planning Mode

- Think before coding
- Decompose complex problems
- Strategic approach
- Clear execution path

## Thought Models (Opus)

- Deep reasoning capability
- Complex problem solving
- Strategic planning
- Architectural decisions

## Live Demo: Exploring a Codebase

```bash
# Traditional approach
find . -name "*.py" | xargs grep "function"

# Claude Code approach
# Natural language ‚Üí Composed tool actions
```

# Best Practices & Safety

## Best Practices

- CLAUDE.md configuration
- Custom workflows
- Safety considerations
- Tool permissions

üìö [Claude Code Best Practices](https://www.anthropic.com/engineering/claude-code-best-practices)

## Anthropic Team Talks

**Deep Dives from the Claude Code Team**
- [AI Engineer: Claude Code & the evolution of agentic coding - Boris Cherny, Anthropic](https://youtu.be/jBr-EERbXJw?si=XVWDMKKnZUzpuBLa)
- [Anthropic: A conversation on Claude Code](https://youtu.be/Yf_1w00qIKc?si=bxmBKqtWSAYVEFgJ)
- [Latent Space: Claude Code: Anthropic's CLI Agent](https://youtu.be/zDmW5hJPsvQ?si=h7Riq3QV4cclW9IJ)

## Common Pitfalls

- Over-ambitious initial requests
- Not using CLAUDE.md
- Skipping planning phase
- Ignoring tool permissions

## Safety Considerations

- Tool allowlists
- Container environments
- Git integration
- Code review practices

# Resources & Next Steps

## Essential Links

**Claude Code**
- [Documentation](https://docs.anthropic.com/en/docs/claude-code)
- [Best Practices](https://www.anthropic.com/engineering/claude-code-best-practices)
- [GitHub Issues](https://github.com/anthropics/claude-code/issues)

**Dialogue Engineering**
- [Answer.AI Solveit](https://www.answer.ai/posts/2024-11-07-solveit.html)
- [Solveit Course](https://solveit.fast.ai/)
- [Jeremy Howard's Answer.AI](https://www.answer.ai/)

## Tools & Workflow

**Voice Input**
- [Mac Whisper](https://goodsnooze.gumroad.com/l/macwhisper)
- [OpenAI Whisper](https://github.com/openai/whisper)

**Quarto & RevealJS**
- [Quarto Documentation](https://quarto.org/)
- [RevealJS Presentations](https://quarto.org/docs/presentations/revealjs/)
- [GitHub Pages Publishing](https://quarto.org/docs/publishing/github-pages.html)

## This Presentation

üìÅ [Source Repository](https://github.com/LA3D/cc-demo)
üìÑ [Presentation QMD](https://github.com/LA3D/cc-demo/blob/main/claude-code.qmd)
üí¨ [Dialogue Transcripts](https://github.com/LA3D/cc-demo/tree/main/dialogs)
üåê [Live Presentation](https://la3d.github.io/cc-demo/)